{
  "hash": "635aac9a6417238300f0cb3531a6ad51",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"pandas study\"\nauthor: \"Yoon Heejae\"\ndate: now\ncategories: [study]\n---\n\n## 데이터 불러오기\n\n::: {#52b33b6a .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('bike_data.csv')\ndf.head()\ndf.shape\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n```\n:::\n\n\n### 1번 문제 계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오\n\n::: {#0a83a793 .cell execution_count=2}\n``` {.python .cell-code}\n# 1번\ndf1 = df[df['season']==1]\ndf1\ndf1['hour'] = df1['datetime'].dt.hour\ndf1\nmax(df1.groupby('hour')['count'].sum()) # 13시 1417개\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16224\\1215149187.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1['hour'] = df1['datetime'].dt.hour\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n1417\n```\n:::\n:::\n\n\n### 2번 문제 각 계절(season)별 평균 대여량(count)을 구하시오.\n\n::: {#b211a1a1 .cell execution_count=3}\n``` {.python .cell-code}\ndf.groupby('season')['count'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nseason\n1    103.169811\n2    218.803922\n3    265.500000\n4    218.581197\nName: count, dtype: float64\n```\n:::\n:::\n\n\n### 3번 문제 3번 특정 달(month) 동안의 총 대여량(count)을 구하시오.\n\n::: {#a4f51a54 .cell execution_count=4}\n``` {.python .cell-code}\ndf['month'] = df['datetime'].dt.month\ndf_jan = df[df['month'] == 1]\ndf_jan['count'].sum()\ndf['datetime']\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0     2011-09-05 17:00:00\n1     2011-05-17 11:00:00\n2     2011-11-10 09:00:00\n3     2011-10-13 07:00:00\n4     2011-10-15 14:00:00\n              ...        \n430   2011-04-07 16:00:00\n431   2011-09-03 22:00:00\n432   2011-11-12 22:00:00\n433   2012-04-11 23:00:00\n434   2012-01-06 09:00:00\nName: datetime, Length: 435, dtype: datetime64[ns]\n```\n:::\n:::\n\n\n### 4번 가장 대여량이 많은 날짜를 구하시오.\n\n::: {#31598086 .cell execution_count=5}\n``` {.python .cell-code}\ndf['date'] = df['datetime'].dt.date\na = df.groupby('date',as_index=False)[['count']].sum()\na\n\nimport numpy as np\na\nmax_idx = np.argmax(a['count'])\na.iloc[max_idx,:]\na.iloc[198,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ndate     2012-05-11\ncount          1398\nName: 198, dtype: object\n```\n:::\n:::\n\n\n### 5번 시간대(hour)별 평균 대여량(count)을 구하시오.\n\n::: {#76e32c01 .cell execution_count=6}\n``` {.python .cell-code}\ndf['hour'] = df['datetime'].dt.hour\ndf.groupby('hour',as_index=False)[['count']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hour</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>43.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>52.714286</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>32.842105</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>12.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>6.687500</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>17.750000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>58.705882</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>208.937500</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>483.055556</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>260.117647</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>10</td>\n      <td>144.130435</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>11</td>\n      <td>182.000000</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>12</td>\n      <td>277.533333</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>13</td>\n      <td>290.600000</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>14</td>\n      <td>266.842105</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>15</td>\n      <td>255.666667</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>16</td>\n      <td>373.052632</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>17</td>\n      <td>519.200000</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>18</td>\n      <td>447.769231</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>19</td>\n      <td>322.103448</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>20</td>\n      <td>210.083333</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>21</td>\n      <td>196.619048</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>22</td>\n      <td>113.560000</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>23</td>\n      <td>77.352941</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 6번 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n\n::: {#ee6c72aa .cell execution_count=7}\n``` {.python .cell-code}\ndf['weekday'] = df['datetime'].dt.weekday\ndf.groupby('weekday',as_index=False)['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weekday</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>10191</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>11198</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>13839</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>13319</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>16315</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>12105</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>11066</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 7번 주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n::: {#0bdc02fd .cell execution_count=8}\n``` {.python .cell-code}\ndf\ndf_melt = pd.melt(df,id_vars=['datetime','season',],\n        value_vars=['casual','registered'],\n        var_name='user_type',\n        value_name='user_count')\n```\n:::\n\n\n### 8번 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\n::: {#536484b6 .cell execution_count=9}\n``` {.python .cell-code}\ndf_melt.groupby(['season','user_type'])[['user_count']].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>casual</td>\n      <td>14.122642</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>registered</td>\n      <td>89.047170</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>casual</td>\n      <td>48.990196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>registered</td>\n      <td>169.813725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>casual</td>\n      <td>55.127273</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>registered</td>\n      <td>210.372727</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4</td>\n      <td>casual</td>\n      <td>29.709402</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4</td>\n      <td>registered</td>\n      <td>188.871795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 9번로그 칼럼에서 숫자 정보만 추출하시오.\n\n::: {#f78e6165 .cell execution_count=10}\n``` {.python .cell-code}\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('logdata.csv')\nprint(df.head(2))\ndf['숫자'] = df['로그'].str.findall(r'\\d+')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                  로그\n0  2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n1  2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n```\n:::\n:::\n\n\n### 10번로그 칼럼에서 모든 시간 정보를 추출하시오.\n\n::: {#fbbbcef7 .cell execution_count=11}\n``` {.python .cell-code}\ndf['시간'] = df['로그'].str.extract(r'([\\d]{2}:[\\d]{2}:[\\d]{2})')\ndf['시간']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0     12:34:56\n1     12:35:00\n2     12:36:10\n3     12:37:22\n4     12:38:44\n5     12:39:50\n6     12:40:56\n7     12:41:00\n8     12:42:10\n9     12:43:22\n10    12:44:44\n11    12:45:50\n12    12:46:56\n13    12:47:00\n14    12:48:10\n15    12:49:22\n16    12:50:44\n17    12:51:50\n18    12:52:56\n19    12:53:00\n20    12:54:10\n21    12:55:22\n22    12:56:44\n23    12:57:50\n24    12:58:56\n25    12:59:00\n26    13:00:10\n27    13:01:22\n28    13:02:44\n29    13:03:50\nName: 시간, dtype: object\n```\n:::\n:::\n\n\n### 11번로그 칼럼에서 한글 정보만 추출하시오.\n\n::: {#233b0c68 .cell execution_count=12}\n``` {.python .cell-code}\ndf['User'] = df['로그'].str.extract(r'([가-힣]+)')\ndf['User']\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0     홍길동\n1     김철수\n2     이영희\n3     박지성\n4     최강타\n5     장보고\n6     홍길동\n7     김철수\n8     이영희\n9     박지성\n10    최강타\n11    장보고\n12    홍길동\n13    김철수\n14    이영희\n15    박지성\n16    최강타\n17    장보고\n18    홍길동\n19    김철수\n20    이영희\n21    박지성\n22    최강타\n23    장보고\n24    홍길동\n25    김철수\n26    이영희\n27    박지성\n28    최강타\n29    장보고\nName: User, dtype: object\n```\n:::\n:::\n\n\n### 12번로그 칼럼에서 특수 문자를 제거하시오.\n\n::: {#220b5efb .cell execution_count=13}\n``` {.python .cell-code}\ndf['제거'] = df['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\ndf['제거']\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0         20240718 123456 User 홍길동 Action Login ID12345\n1     20240718 123500 User 김철수 Action Purchase Amoun...\n2       20240718 123610 User 이영희 Action Logout Time 30s\n3         20240718 123722 User 박지성 Action Login ID67890\n4     20240718 123844 User 최강타 Action Purchase Amoun...\n5       20240718 123950 User 장보고 Action Logout Time 25s\n6     20240718 124056 User 홍길동 Action Purchase Amoun...\n7         20240718 124100 User 김철수 Action Login ID23456\n8     20240718 124210 User 이영희 Action Purchase Amoun...\n9       20240718 124322 User 박지성 Action Logout Time 45s\n10        20240718 124444 User 최강타 Action Login ID78901\n11    20240718 124550 User 장보고 Action Purchase Amoun...\n12      20240718 124656 User 홍길동 Action Logout Time 35s\n13    20240718 124700 User 김철수 Action Purchase Amoun...\n14        20240718 124810 User 이영희 Action Login ID56789\n15    20240718 124922 User 박지성 Action Purchase Amoun...\n16      20240718 125044 User 최강타 Action Logout Time 50s\n17        20240718 125150 User 장보고 Action Login ID34567\n18    20240718 125256 User 홍길동 Action Purchase Amoun...\n19      20240718 125300 User 김철수 Action Logout Time 20s\n20    20240718 125410 User 이영희 Action Purchase Amoun...\n21        20240718 125522 User 박지성 Action Login ID12346\n22    20240718 125644 User 최강타 Action Purchase Amoun...\n23      20240718 125750 User 장보고 Action Logout Time 55s\n24        20240718 125856 User 홍길동 Action Login ID67891\n25    20240718 125900 User 김철수 Action Purchase Amoun...\n26      20240718 130010 User 이영희 Action Logout Time 40s\n27    20240718 130122 User 박지성 Action Purchase Amoun...\n28        20240718 130244 User 최강타 Action Login ID78902\n29    20240718 130350 User 장보고 Action Purchase Amoun...\nName: 제거, dtype: object\n```\n:::\n:::\n\n\n### 13번 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n\n::: {#403fa51f .cell execution_count=14}\n``` {.python .cell-code}\ndf\ndf['숫자']\ndf['숫자']\ndef get_last_number(lst):\n    if lst:  # 리스트가 비어있지 않으면\n        return lst[-1]\n    else:\n        return None\ndf['로그']\ndf['amount'] = df['로그'].str.findall(r'\\d+').apply(get_last_number)\ndf['amount']\ntype(df['amount'][0])\ndf['amount'] = df['amount'].astype(int)\ntype(df['amount'][0])\n\nans = df.groupby('User',as_index=False)[['amount']].mean()\nans.sort_values('User')\n\n## 답안\ndf['Amount'] = df['로그'].str.extract(r'Amount:\\s*(\\d+)').astype(float)\ndf['User'] = df['로그'].str.extract(r'User:\\s*([가-힣]+)')\ngrouped = df.groupby('User')['Amount'].mean().reset_index()\nprint(\"\\n그룹별 평균 Amount 계산:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n그룹별 평균 Amount 계산:\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}